name: Build Docker Image
on:
  pull_request:
    types: [assigned, opened, synchronize, reopened]
  push:
    branches:
      - master

jobs:
  turnstyle:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment: Development
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: set-up-environment
        uses: DFE-Digital/github-actions/set-up-environment@master

      - uses: Azure/login@v1
        with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: Azure/get-keyvault-secrets@v1
        id:   azSecret
        with:
           keyvault: ${{ secrets.KEY_VAULT}}
           secrets: 'SLACK-WEBHOOK'

      - name: Check workflow concurrency
        uses: softprops/turnstyle@v1
        with:
          poll-interval-seconds: 20
          same-branch-only: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Slack Notification
        if: failure()
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_COLOR: ${{env.SLACK_ERROR}}
          SLACK_MESSAGE: Workflow concurrency issue
          SLACK_TITLE: Turnstyle failure ${{ github.workflow }}
          SLACK_WEBHOOK: ${{ steps.azSecret.outputs.SLACK-WEBHOOK }}

  build:
    name: Build and Test
    runs-on: ubuntu-latest
    environment: Development
    needs: turnstyle
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: set-up-environment
        uses: DFE-Digital/github-actions/set-up-environment@master

      - uses: Azure/login@v1
        with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: Azure/get-keyvault-secrets@v1
        id:   azSecret
        with:
           keyvault: ${{ secrets.KEY_VAULT}}
           secrets: 'SLACK-WEBHOOK, DOCKER-USERNAME, DOCKER-PASSWORD , ACTIONS-API-ACCESS-TOKEN, SONAR-TOKEN'

      - name: Lint Dockerfile
        uses: brpaz/hadolint-action@master
        with:
             dockerfile: "Dockerfile"

      - name: Setup sonarqube
        uses: warchant/setup-sonar-scanner@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master
        with:
          driver-opts: network=host

      - name: Get Settings
        id: sha
        run: |
              echo ::set-output name=short::$(echo "${{ github.sha }}" | cut -c -7)
              echo ::set-output name=image::${{ env.DOCKERHUB_REPOSITORY }}:sha-$(echo "${{ github.sha }}" | cut -c -7)
              echo ::set-output name=local::localhost:5000/${{env.DOCKERHUB_REPOSITORY}}:sha-$(echo "${{ github.sha }}" | cut -c -7)
              echo ::set-output name=pr_image::${{ env.DOCKERHUB_REPOSITORY }}:review-$(echo "${{ github.sha }}" | cut -c -7)

      - name: Cache Docker layers
        uses: actions/cache@v2.1.4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
             ${{ runner.os }}-buildx-

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ steps.azSecret.outputs.DOCKER-USERNAME }}
          password: ${{ steps.azSecret.outputs.DOCKER-PASSWORD }}


      - name: Build master and push to Docker Hub
        if: github.ref == 'refs/heads/master'
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          tags: |
                 ${{ steps.sha.outputs.image }}
                 ${{ steps.sha.outputs.local }}
          push: true
          build-args: |
                      APP_SHA=${{ steps.sha.outputs.short }}

      - name: Build PR and push to Docker Hub
        if: github.ref != 'refs/heads/master'
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          tags: |
                 ${{ steps.sha.outputs.pr_image }}
                 ${{ steps.sha.outputs.local }}
          push: true
          build-args: |
                      APP_SHA=${{ steps.sha.outputs.short }}

      - name: Prepare DB
        run: |-
          docker run --net=host -t --rm -e RAILS_ENV=test ${{ steps.sha.outputs.local }} rails db:prepare

      - name: Run Specs
        run: |-
          docker run --net=host -t --rm -v ${PWD}/out:/app/out -v ${PWD}/coverage:/app/coverage -e RAILS_ENV=test ${{ steps.sha.outputs.local }} \
            rspec --format RspecSonarqubeFormatter --out /app/out/test-report.xml --format documentation

      - name: Fixup report file paths
        run: sudo sed -i "s?\"/app/?\"${PWD}/?" coverage/coverage.json

      - name:  Keep Code Coverage Report
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: Code_Coverage
          path: ${{ github.workspace }}/coverage/*

      - name:  Keep Unit Tests Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: unit_tests
          path: ${{ github.workspace }}/out/*

      - name: Run Javascript Tests
        run: |-
          docker run -t --rm -e RAILS_ENV=test -e NODE_ENV=test -e CI=true \
            ${{ steps.sha.outputs.local }} "yarn && yarn spec"

      - name: Lint Ruby
        run: |-
          docker run -t --rm -v ${PWD}/out:/app/out -e RAILS_ENV=test ${{ steps.sha.outputs.local }} \
            rubocop app config db lib spec Gemfile --format json --out=/app/out/rubocop-result.json

      - name:  Keep Rubocop output
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: Rubocop_results
          path: ${{ github.workspace }}/out/rubocop-result.json

      - name: Run Brakeman static security scanner
        run: |-
          docker run -t --rm -e RAILS_ENV=test ${{ steps.sha.outputs.local }} brakeman --no-pager

      - name: Run sonarqube
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: sonar-scanner
           -Dsonar.login=${{ steps.azSecret.outputs.SONAR-TOKEN }}
           -Dsonar.organization=dfe-digital
           -Dsonar.host.url=https://sonarcloud.io/
           -Dsonar.projectKey=get-teacher-training-adviser-service
           -Dsonar.testExecutionReportPaths=${PWD}/out/test-report.xml
           -Dsonar.ruby.coverage.reportPaths=${PWD}/coverage/coverage.json
           -Dsonar.ruby.rubocop.reportPaths=${PWD}/out/rubocop-result.json

      - name: Trigger CVE Testing
        if: github.ref == 'refs/heads/master'
        uses: benc-uk/workflow-dispatch@v1.1
        with:
           workflow: cve
           token: ${{  steps.azSecret.outputs.ACTIONS-API-ACCESS-TOKEN }}
           inputs: '{"image": "${{ steps.sha.outputs.image }}"}'

      - name: Slack Notification
        if: failure() && github.ref == 'refs/heads/master'
        uses: rtCamp/action-slack-notify@master
        env:
           SLACK_COLOR:   ${{env.SLACK_FAILURE}}
           SLACK_TITLE:   'Failure: Building Master ${{env.APPLICATION}} ${{github.ref}}'
           SLACK_TEXT:    'The build has failed please click on the Actions URL to investigate the problem.'
           SLACK_WEBHOOK: ${{ steps.azSecret.outputs.SLACK-WEBHOOK }}

  review:
    name: Review Deployment Process
    needs: build
    environment: Development
    if: github.ref != 'refs/heads/master' && startsWith(github.head_ref, 'dependabot/') == false && github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v2

      - uses: DFE-Digital/github-actions/set-up-environment@master

      - uses: Azure/login@v1
        with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: Azure/get-keyvault-secrets@v1
        id:   azSecret
        with:
           keyvault: ${{ secrets.KEY_VAULT}}
           secrets: 'ACTIONS-API-ACCESS-TOKEN, SLACK-WEBHOOK'

      - name: Trigger Review Deployment
        uses: benc-uk/workflow-dispatch@v1.1
        with:
          workflow: Deploy to PaaS
          token: ${{ steps.azSecret.outputs.ACTIONS-API-ACCESS-TOKEN }}
          inputs: '{"environment": "Review", "sha": "${{ github.sha }}" , "pr": "${{github.event.number}}"  }'
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Wait for Deployment to Review
        uses: fountainhead/action-wait-for-check@v1.0.0
        id: wait-for-review
        with:
          token: ${{ steps.azSecret.outputs.ACTIONS-API-ACCESS-TOKEN}}
          checkName: Deploy Review
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Check if Review Deployment has returned with a failure
        if: steps.wait-for-review.outputs.conclusion == 'failure'
        run: exit 1

      - name: Post PR comment
        run: |
          curl --silent  \
               --header "Accept: application/vnd.github.v3+json" \
               --header "Authorization: Bearer ${{ github.token }}" \
               --request POST \
               --data '{"body": "Review app deployed to https://${{env.REVIEW_APPLICATION}}-${{github.event.number}}.${{env.DOMAIN}} "}'  \
               https://api.github.com/repos/${{ github.repository }}/issues/${{github.event.number }}/comments

      - name: Add Review Label
        if: contains(github.event.pull_request.user.login, 'dependabot') == false
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ steps.azSecret.outputs.ACTIONS-API-ACCESS-TOKEN }}
          labels: Review

      - name: Slack Notification
        if: failure()
        uses: rtCamp/action-slack-notify@master
        env:
           SLACK_COLOR:   ${{env.SLACK_FAILURE}}
           SLACK_TITLE:   'Failure: Preparing from Preview'
           SLACK_MESSAGE: 'Failure with Review preperation for ${{env.APPLICATION}}'
           SLACK_WEBHOOK: ${{ steps.azSecret.outputs.SLACK-WEBHOOK }}

  development:
    name: Development Deployment
    needs: build
    environment: Development
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{steps.tag_version.outputs.pr_number}}
      release_sha: ${{github.sha}}
    steps:
       - uses: actions/checkout@v2

       - uses: DFE-Digital/github-actions/set-up-environment@master

       - uses: Azure/login@v1
         with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

       - uses: Azure/get-keyvault-secrets@v1
         id:   azSecret
         with:
            keyvault: ${{ secrets.KEY_VAULT}}
            secrets: 'ACTIONS-API-ACCESS-TOKEN, SLACK-WEBHOOK'

       - name: Trigger Development Deployment
         uses: benc-uk/workflow-dispatch@v1.1
         with:
           workflow: Deploy to PaaS
           token: ${{ steps.azSecret.outputs.ACTIONS-API-ACCESS-TOKEN }}
           inputs: '{"environment": "Development", "sha": "${{ github.sha }}"}'
           ref: "${{github.ref}}"

       - name: Wait for Deployment to Development
         uses: fountainhead/action-wait-for-check@v1.0.0
         id: wait-for-deploy
         with:
           token: ${{ steps.azSecret.outputs.ACTIONS-API-ACCESS-TOKEN}}
           checkName: Deploy Development
           ref: "${{github.ref}}"

       - name: Check if Development Deployment has returned with a failure
         if: steps.wait-for-deploy.outputs.conclusion == 'failure'
         run: exit 1

       - name: Trigger OWASP Testing
         uses: benc-uk/workflow-dispatch@v1.1
         with:
           workflow: owasp
           token: ${{ steps.azSecret.outputs.ACTIONS-API-ACCESS-TOKEN }}
           inputs: '{"environment": "dev"}'

       - name: Generate Tag from PR Number
         id:   tag_version
         uses: DFE-Digital/github-actions/GenerateReleaseFromSHA@master
         with:
           sha: ${{github.sha}}

       - name: Create a GitHub Release
         id: release
         if:   steps.tag_version.outputs.pr_found == 1
         uses: actions/create-release@v1
         env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         with:
            tag_name: ${{ steps.tag_version.outputs.pr_number }}
            release_name: Release ${{ steps.tag_version.outputs.pr_number }}
            commitish: ${{ github.sha }}
            prerelease: false
            draft:      false

       - name: Copy PR Info to Release
         if: steps.release.outputs.id
         uses: DFE-Digital/github-actions/CopyPRtoRelease@master
         with:
           PR_NUMBER:  ${{ steps.tag_version.outputs.pr_number }}
           RELEASE_ID: ${{ steps.release.outputs.id }}
           TOKEN: ${{secrets.GITHUB_TOKEN}}
  qa:
    name: Quality Assurance Deployment
    needs: development
    environment: Test
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
       - uses: actions/checkout@v2

       - uses: DFE-Digital/github-actions/set-up-environment@master

       - uses: Azure/login@v1
         with:
             creds: ${{ secrets.AZURE_CREDENTIALS }}

       - uses: Azure/get-keyvault-secrets@v1
         id:   azSecret
         with:
            keyvault: ${{ secrets.KEY_VAULT}}
            secrets: 'ACTIONS-API-ACCESS-TOKEN, SLACK-WEBHOOK'

       - name: Trigger Deployment to QA
         uses: benc-uk/workflow-dispatch@v1.1
         with:
           workflow: Deploy to PaaS
           token: ${{ steps.azSecret.outputs.ACTIONS-API-ACCESS-TOKEN }}
           inputs: '{"environment": "Test", "sha": "${{ github.sha }}" }'
           ref: "${{github.ref}}"

       - name: Wait for Deployment to QA
         uses: fountainhead/action-wait-for-check@v1.0.0
         id: wait-for-deploy
         with:
           token: ${{ steps.azSecret.outputs.ACTIONS-API-ACCESS-TOKEN}}
           checkName: Deploy Test
           ref: "${{github.ref}}"

       - name: Check if QA Deployment has returned with a failure
         if: steps.wait-for-deploy.outputs.conclusion == 'failure'
         run: exit 1

       - name: Slack Notification
         if: failure()
         uses: rtCamp/action-slack-notify@master
         env:
           SLACK_COLOR:   ${{env.SLACK_FAILURE}}
           SLACK_TITLE:   'Failure: Failure in Post-Development Deploy'
           SLACK_MESSAGE: 'Failure with initialising QA deployment  for ${{env.APPLICATION}}'
           SLACK_WEBHOOK: ${{ steps.azSecret.outputs.SLACK-WEBHOOK }}

  cypress:
     name: Run Cypress Tests on QA
     runs-on: ubuntu-latest
     needs: qa
     environment: Test
     steps:
       - uses: actions/checkout@v2

       - uses: DFE-Digital/github-actions/set-up-environment@master

       - uses: Azure/login@v1
         with:
             creds: ${{ secrets.AZURE_CREDENTIALS }}

       - uses: Azure/get-keyvault-secrets@v1
         id:   azSecret
         with:
            keyvault: ${{ secrets.KEY_VAULT}}
            secrets: 'ACTIONS-API-ACCESS-TOKEN, SLACK-WEBHOOK'

       - name: Trigger Cypress Tests (DFE-Digital/get-into-teaching-frontend-tests )
         uses: benc-uk/workflow-dispatch@v1.1
         with:
           repo: DFE-Digital/get-into-teaching-frontend-tests
           workflow: Cypress
           token: ${{ steps.azSecret.outputs.ACTIONS-API-ACCESS-TOKEN }}
           inputs: '{"application": "TTA" , "reference": "${{ github.sha }}" }'
           ref:  refs/heads/master

       - name: Wait for Cypress Tests
         uses: fountainhead/action-wait-for-check@v1.0.0
         id: wait-for-deploy
         with:
           token: ${{ steps.azSecret.outputs.ACTIONS-API-ACCESS-TOKEN}}
           checkName: "${{ github.sha }}"
           ref: refs/heads/master
           repo: get-into-teaching-frontend-tests
           intervalSeconds: 30
           timeoutSeconds: 1800

       - name: Check for test failure
         if: steps.wait-for-build.outputs.conclusion == 'failure'
         run: exit 1

  production:
     name: Production Deployment
     runs-on: ubuntu-latest
     needs: [ cypress , development ]
     environment: Production
     steps:
       - uses: actions/checkout@v2

       - uses: DFE-Digital/github-actions/set-up-environment@master

       - uses: Azure/login@v1
         with:
             creds: ${{ secrets.AZURE_CREDENTIALS }}

       - uses: Azure/get-keyvault-secrets@v1
         id:   azSecret
         with:
            keyvault: ${{ secrets.KEY_VAULT}}
            secrets: 'ACTIONS-API-ACCESS-TOKEN, SLACK-WEBHOOK, SLACK-RELEASE-NOTE-WEBHOOK'

       - name: Get Release Id from Tag
         id: tag_id
         uses: DFE-Digital/github-actions/DraftReleaseByTag@master
         with:
           TAG: ${{needs.development.outputs.release_tag}}
           TOKEN: ${{steps.azSecret.outputs.ACTIONS-API-ACCESS-TOKEN}}

       - name: Publish Release
         if: steps.tag_id.outputs.release_id
         uses: eregon/publish-release@v1
         env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         with:
           release_id: ${{steps.tag_id.outputs.release_id}}

       - name: Trigger Deployment to Production
         uses: benc-uk/workflow-dispatch@v1.1
         with:
           workflow: Deploy to PaaS
           token: ${{ steps.azSecret.outputs.ACTIONS-API-ACCESS-TOKEN }}
           inputs: '{"environment": "Production", "sha": "${{ github.sha }}" }'
           ref: ${{github.ref}}

       - name: Wait for Deployment to Production
         uses: fountainhead/action-wait-for-check@v1.0.0
         id: wait-for-deploy
         with:
           token: ${{ steps.azSecret.outputs.ACTIONS-API-ACCESS-TOKEN}}
           checkName: Deploy Production
           timeoutSeconds: 180
           ref: ${{github.ref}}

       - name: Check if Production Deployment has returned with a failure
         if: steps.wait-for-deploy.outputs.conclusion == 'failure'
         run: exit 1

       - name: Check if Production Deployment has returned with a timeout
         if: steps.wait-for-deploy.outputs.conclusion == 'timeout'
         run: exit 1

       - name: Slack Release Notification
         if: steps.tag_id.outputs.release_id
         uses: rtCamp/action-slack-notify@master
         env:
           SLACK_COLOR:   ${{env.SLACK_SUCCESS}}
           SLACK_TITLE:   "Release Published: ${{steps.tag_id.outputs.release_name}}"
           SLACK_MESSAGE: ${{ fromJson( steps.tag_id.outputs.release_body) }}
           SLACK_WEBHOOK: ${{ steps.azSecret.outputs.SLACK-RELEASE-NOTE-WEBHOOK }}
           MSG_MINIMAL:   true

       - name: Slack Notification
         if: failure()
         uses: rtCamp/action-slack-notify@master
         env:
           SLACK_COLOR:   ${{env.SLACK_FAILURE}}
           SLACK_TITLE: "Production Release : ${{github.event.title}}"
           SLACK_MESSAGE: 'Failure deploying Production release'
           SLACK_WEBHOOK: ${{ steps.azSecret.outputs.SLACK-WEBHOOK }}

